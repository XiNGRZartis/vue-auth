
-login and refresh

    **auth bearer should not be included in response.
    -stack overflow question about modules...

    ---------

    -override vue-jwt-auth
        -update to v1.0.0-dev
        -update README with some basic info.
        -push et all
        -change to @websanova/vue-auth
            -find a good name for npm here (and push)
            -redirect old npm to new
            -rename the github repo
            -create new repo with redirect
            -npm install @websanova/vue-auth
            -require("@websanova/vue-auth")


    -driver should b set with a name and require variable (this allows full extendability for expansion)
        *driver should be full object to avoid requiring a build.
        -here options can be set for auth name like 'Authorization'.
        -support for multiple drivers in real time...

    (hook into mixbloom for testing).
        -demo server under naespace for auth method like "jwt",
            -"basic" - should be in database
        -set up test server from mixbloom online for demoing...?
        -on websanova (mysql). demo-api.websanova.com
            -also publish auth controller used for demo...
            -and recreate steps...

    -login as Other
    -logout other


    -clean up app ids...
        -can't really do this on backend can we???????


---------------------------------------

-probably can specify config for demo server (rename to webpack.demo.config).
-clean up package.json dependencies (into one file)
-kill package.json and webpack.config.js in demo.
-setup separate build for vue-auth
    -can now also test built file (in dist).



-Reserve names for react-jwt-auth angular-jwt-auth vue-jwt-auth
    -Potentially move package to vue-auth, react-auth, angular-auth


- Need some kind of testing (important to hook up with existing first).
- Will need to set up with webpack (Need way to save, compile, test on the fly).
    - This will need the fake PHP library.

- All functions should be overridable.
- All Vue methods need to go into a driver file (Vue.js), (React.js).
- Just use regular JavaScript object again.
- Make utils file.
- Need to look over expiration mechanism.
- oauth2 should use drivers (so that they can also easily be added by user on the fly and support other functionality in the future).
- oauth1 library (Twitter).
- Test again supporting (regular token based and JWT tokens).
- Login methods should just keep all data in `data` and not need all the multiple arguments.

- Update README methods (should be easier to lookup).
    - A lot more example.

- People asking for a working demo (but how to test with API, maybe a little php faker ?).

-dependencies
    -vue-router >= 0.8.0

-docs
    -section as contextual methods (will always have proper context in success and error functions).

-changes
    -package name is scoped now - it's a bit annoying have to worry about package names being take so they are now scped throught `@websanova` and will be consistently named with the GitHub repo.

    - because this plugin is still in a lot of development, this has been made as incremental change even though it's been overhauled quite a bit.
        -i will not be maintaining any backward compatability. However this is also released as an rc and will go into version one soon once bugs have been ironed out so it's a bit safer to use.

    -added demo
        -sudo npm run demo (you will need to hook up back-end php file for full demo).
    -the library has been renamed to vue-auth (allows to support more types of login methods in the future).
    -options for paths are now objects where you can specify any default data you want to pass into your calls.
        -this goes for any routing params also, but now gives the option of using a string path, or an object with name or path and params.
    -there is now a new register call with the option to auto login on success.
    -there is now no fetch call if the auth call returns a token.
        -because there are different ways that this can be implemented
        -the default is to just refresh the token on each app init.
        -however some users may want to set this token one the user is requested (since that typically happens once or few times) and save a hit to the server.
        -to solve this a hook has been created to automatically sniff out and set a `token` var in each response. This means you can set it pretty much anywhere and it will automatically update the token.
        -the fetch call will be on by default, if you want it disabled (because you are sending the token already somewhere else) just init the app options with { refreshData: { atInit: false }}
        -you can also just call the `refresh` method manually if that suits you better also and provide a `success` callback.
        -can set as header or as var in your data which is always checked at each response so you can insert it wherever you like.
    -better handling for invalid tokens
        -there were some inconsitincies here before
        -this will now automatically logout the user and redirect them (if an invalid token is detected).
    -all functions are overrideable now
    -there is a driver file for vue which supports the binding between the plugin and framework. This allows multiple drivers and overrides for any issues between versions in the future and allows full backward compatability.
    -reverted from using Vue in the base code and just went back to regular JavaScript (not a good idea).
    -all the redirects area also objects now, so you can do a redirect as a `/path` or `{name: 'object'}`.
    -any functions, fields params that involve logging in a secondary user are called `other` now.
    -you can still perform actions as the "admin" user when logged in as other by using `useToken('default')` and switching back to `useToken('other')`.
        -actually this is now enabledOther() and disableOther - not the same as logging out which kills the token for other...
    -you can now specify separate path data for login and oauth1 and oauth2, etc.
    -login, oauth, etc functions now just use one data object to pass in. Specify any options, paths or redirect values in there.
        -these objects act as a base and any values you pass in will override them in that request. This allows a lot more flexibility for any specific setup you may have or hooking up with existing api's that can't be changed.
    -removed function google, and facebook, just use oauth2('facebook', data), etc...
    -the plugin comes preloaded with oauth2 info for google and facebook but you can easily add your own in the options...
        -use provider parameter 'provider'
        -state parameter (pass any info along here)
        -rememberMe (automatically passed through state for you)
        -provide example...
    -there is a logout request that can be made if options.logoutData.url is set (by default it's null).
        -either way the logout will follow consistent format and a `success` callback can be set in.
        -the success method will contain the proper context.
    -login, oauth1, oauth2, register will now have the proper context from calling component (you don't need to use _this kind of stuff).
        -without circular bindings
    -switch to "safe" javascript.
    -support for drivers (this allows more flexibility between different versions)
    -auth drivers (these are not fully extendable yet) for now it supports "bearer" and "plain" (both set the Authorization header in the request).
    -fetch call (I've found sometimes we need to refetch the user data) this has been provided
        -perhaps we update some field but some other processing takes place on the server that changes the users fields
        -we can do it manually by calling user(data) which will set it
        -or you can perform a fetch request also if that's not possible.
    -token function...
    -simpler consitent code base
        -properly pakaged and minified distribution
    -bse64 token stuff removed there really is no readon for this
        -if you need to check this on your own intervals there is a `token` function and it can be put into a timeout on your own using `token` and `refresh` calls..
    -if you don't like the refresh call on boot
        -you can override the tokenExpired routine and check for whatever you like there, you can use `token` call to get the existing token.
        -you can also just override it and return false if you want to do it on your own and use `refresh` call manually.


    -overall file size ????? (compare this).

    *oauth2 support coming.



    **removed expiration check - actually this is just bloat and doesn't really need to be done on front end - let the server determine if it's expired.
        -since this would only fail once every ten or 14 days since most tokens are alive that long it seemed a bit excessive.
        -this also doesn't affect situations where the server would invalidate a token anyway (so it can still fail).
        -for those who REALLY need to check this and save that call - there is the `token` method this can be done on your own with 
            -maybe provide some callback or hook for this....

    -----


-all http methods just pass in directly into $http(data).then(success, error);
-this means you can load up the data with whatever works for you, (body, params, url, method, etc).
    -appropriate defaults are set for you already such as url, method and redirect
    -these can be overridden on in the initial options or on a per request basis.

registerData
    -autoLogin can set this to perform a register and automatically login
    -you can also set the rememberMe option as you would with login. Of course in this case it's only used with the auto login option.
    -redirect: can be string or object

loginData
    -redirect:
    -rememberMe: